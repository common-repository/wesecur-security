<?php

namespace WesecurSecurity\includes\helpers;

use WesecurSecurity\includes\views\WesecurSettingsPage;
use WesecurSecurity\includes\WesecurBlockDirectAccess;
use WesecurSecurity\includes\WesecurCmsUtilsInterface;
use WesecurSecurity\includes\WesecurApiRequestInterface;
use WesecurSecurity\includes\adapters\WesecurGuzzleApiRequestAdapter;

/**
 * Class used to check for malware in WordPress files
 *
 *
 * @class 	   WesecurMalwareChecker
 * @package    WeSecur Security
 * @subpackage WesecurMalwareChecker
 * @category   Class
 * @since	   1.0.0
 * @author     Albert VergÃ©s <albert.verges@wesecur.com>
 * @copyright  2016-2020 WeSecur
 * @license    https://www.gnu.org/licenses/gpl-3.0.txt GPL3
 * @link       https://wordpress.org/plugins/wesecur-security
 */
class WesecurMalwareChecker {

    const DB_EXTERNAL_MALWARE = 'wesecur-external-malware.php';

    const DB_BLACKLISTS = 'wesecur-blacklists.php';

    const DB_SERVER_SIDE_MALWARE = 'wesecur-server-side-malware.php';

    protected $cmsUtils;

    protected $wpVersion;

    protected $apiRequest;

    /** @var WesecurWordpressLocalStorage */
    protected $localStorage;

    function __construct(WesecurApiRequestInterface $apiRequest = null,
                         WesecurCmsUtilsInterface $cmsUtils = null,
                         WesecurWordpressLocalStorage $localStorage = null) {

        if (is_null($cmsUtils)) {
            $cmsUtils = new WesecurWordpressCmsUtils();
        }

        if (is_null($apiRequest)) {
            $apiRequest = new WesecurGuzzleApiRequestAdapter(WESECURSECURITY_API_ENDPOINT . '/');
            $apiRequest->setUserAgent(WESECURSECURITY_API_USER_AGENT);
            $apiRequest->verifySSL(WESECURSECURITY_API_VERIFY_SSL);
        }

        if ($localStorage == null) {
            $localStorage = new WesecurWordpressLocalStorage();
        }

        $this->localStorage = $localStorage;
        $this->apiRequest = $apiRequest;
        $this->cmsUtils = $cmsUtils;
        $this->wpVersion = $this->cmsUtils->getCmsVersion();
    }

    public function hasMalwareIssues($apiKey = '') {
        $hasIssues = false;

        if (empty($apiKey)) {
            $remoteScanner = $this->getRemoteMalwareIssuesFromDatabase();
            if (count($remoteScanner->malware)>0) {
                return true;
            }
        }else{
            try {
                $remoteMalware = $this->getRemoteMalwareFromApi($apiKey);
                if (count($remoteMalware->malware)>0) {
                    return true;
                }
            }catch (\Exception $exception) {
                $hasIssues = false;
            }

            try {
                $malwareResults = $this->getServerSideMalwareFromApi($apiKey);
                if (count($malwareResults->malware_files)>0) {
                    return true;
                }
            } catch (\Exception $exception) {
                $hasIssues = false;
            }
        }

        return $hasIssues;
    }

    public function hasBlacklistIssues($apiKey = '') {
        $hasIssues = false;

        if (empty($apiKey)) {
            $remoteScanner = $this->getRemoteMalwareIssuesFromDatabase();
            if ($remoteScanner->num_blacklists>0) {
                $hasIssues = true;
            }
        }else{
            try {
                $blacklists = $this->getBlacklistsFromApi($apiKey);
                if ($blacklists->num_blacklists > 0) {
                    $hasIssues = true;
                }
            }catch (\Exception $exception) {
                $hasIssues = false;
            }
        }

        return $hasIssues;
    }

    public function getRemoteMalwareIssuesFromDatabase() {

        $malwareFiles = $this->localStorage->read(self::DB_EXTERNAL_MALWARE);

        if ($malwareFiles === FALSE) {
            $malwareFiles = '{"malware":[], "js_links": [], "urls_scanned": 0, "blacklists": [], "num_blacklists": 0, "domain": "", "pages_scanned": 0, "server": {"type": "", "x_powered_by": ""}}';
        }

        return json_decode($malwareFiles);
    }

    public function getBlacklistFromDatabase() {

        $blacklists = $this->localStorage->read(self::DB_BLACKLISTS);

        if ($blacklists === FALSE) {
            $blacklists = '{"blacklists": [], "num_blacklists": 0}';
        }

        return json_decode($blacklists);
    }

    public function getServerSideMalwareFromDatabase() {
        $malwareFiles = $this->localStorage->read(self::DB_SERVER_SIDE_MALWARE);

        if ($malwareFiles === FALSE) {
            $malwareFiles = '{"malware_files":[], "domain": "", "id": "", "num_malware_files": 0, "scan_id":"", "num_scanned_files": 0, "num_cleaned_files": 0, "scanned_at": ""}';
        }

        return json_decode($malwareFiles);
    }

    public function checkRemoteMalware($clearCache = 'false') {
        $endpoint = sprintf( 'scan/%s', WesecurSettingsPage::getSiteDomainName());
        $result = $this->apiRequest->get($endpoint, array("clear" => $clearCache));

        $this->localStorage->saveCache(array("time" => time()), WesecurWordpressLocalStorage::CACHE_TYPE_EXTERNAL_MALWARE);

        return $result;

    }

    public function checkServerSideMalware($apiKey) {
        $headers = array('WESECUR-API-KEY' => $apiKey);
        $params = array(
            'domain' => WesecurSettingsPage::getSiteDomainName(),
            'blacklist_scan' => false,
            'malware_scan' => true,
            'cms_scan' => true,
            'vulnerability_scan' => false
        );

        $this->apiRequest->post(
            'scan/detect',
            $params,
            $headers
        );
    }

    public function getRemoteMalwareFromApi($apiKey) {

        if ($this->localStorage->readFromCache(WesecurWordpressLocalStorage::CACHE_TYPE_EXTERNAL_MALWARE)) {
            $remoteMalwareResult = $this->getRemoteMalwareIssuesFromDatabase();
        }else{

            try {
                $headers = array('WESECUR-API-KEY' => $apiKey);
                $apiResponse = $this->apiRequest->get(
                    sprintf('analysis/malware/external/%s/last', WesecurSettingsPage::getSiteDomainName()),
                    array(),
                    $headers
                );
            }catch (\Exception $exception) {
                $this->localStorage->saveCache(array("time" => time()), WesecurWordpressLocalStorage::CACHE_TYPE_EXTERNAL_MALWARE);
                throw $exception;
            }

            $remoteMalwareResult = json_decode($apiResponse->getBody());
            $this->localStorage->save((array)$remoteMalwareResult, self::DB_EXTERNAL_MALWARE);
            $this->localStorage->saveCache(array("time" => time()), WesecurWordpressLocalStorage::CACHE_TYPE_EXTERNAL_MALWARE);
        }

        return $remoteMalwareResult;
    }


    public function getBlacklistsFromApi($apiKey) {
        if ($this->localStorage->readFromCache(WesecurWordpressLocalStorage::CACHE_TYPE_BLACKLIST)) {
            $blacklistResult = $this->getBlacklistFromDatabase();
        }else{

            try {
                $headers = array('WESECUR-API-KEY' => $apiKey);
                $apiResponse = $this->apiRequest->get(
                    sprintf('analysis/blacklist/%s/last', WesecurSettingsPage::getSiteDomainName()),
                    array(),
                    $headers
                );
            }catch (\Exception $exception) {
                $this->localStorage->saveCache(array("time" => time()), WesecurWordpressLocalStorage::CACHE_TYPE_BLACKLIST);
                throw $exception;
            }

            $blacklistResult = json_decode($apiResponse->getBody());
            $this->localStorage->save((array)$blacklistResult, self::DB_BLACKLISTS);
            $this->localStorage->saveCache(array("time" => time()), WesecurWordpressLocalStorage::CACHE_TYPE_BLACKLIST);
        }
        return $blacklistResult;
    }

    public function getServerSideMalwareFromApi($apiKey) {
        if ($this->localStorage->readFromCache(WesecurWordpressLocalStorage::CACHE_TYPE_SERVER_SIDE)) {
            $serverSideMalware = $this->getServerSideMalwareFromDatabase();
        }else{

            try {
                $headers = array('WESECUR-API-KEY' => $apiKey);
                $apiResponse = $this->apiRequest->get(
                    sprintf('analysis/malware/%s/last', WesecurSettingsPage::getSiteDomainName()),
                    array(),
                    $headers
                );
            }catch (\Exception $exception) {
                $this->localStorage->saveCache(array("time" => time()), WesecurWordpressLocalStorage::CACHE_TYPE_SERVER_SIDE);
                throw $exception;
            }

            $serverSideMalware = json_decode($apiResponse->getBody());
            $this->localStorage->save((array)$serverSideMalware, self::DB_SERVER_SIDE_MALWARE);
            $this->localStorage->saveCache(array("time" => time()), WesecurWordpressLocalStorage::CACHE_TYPE_SERVER_SIDE);
        }
        return $serverSideMalware;
    }
}